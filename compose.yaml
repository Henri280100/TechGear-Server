# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .


  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.

  spring-app:
    container_name: techgear-spring-app
    build:
      context: .
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:$POSTGRES_LOCAL_PORT/techgeardb
      SPRING_DATASOURCE_USERNAME: $POSTGRES_USER
      SPRING_DATASOURCE_PASSWORD: $POSTGRES_PASSWORD
      SPRING.JPA.PROPERTIES.HIBERNATE.DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      FACEBOOK_CLIENT_ID: ${FACEBOOK_CLIENT_ID}
      FACEBOOK_CLIENT_SECRET: ${FACEBOOK_CLIENT_SECRET}
      TYPESENSE_HOST: typesense
      TYPESENSE_PORT: 8108
      TYPESENSE_PROTOCOL: http
      TYPESENSE_CONNECTION_TIMEOUT_SECONDS: 30
      TYPESENSE_API_KEY: bppTGdU4ZdgIJNyRWYi3hPC5C8xQ9IWLHWBYfkWjuCIbtjCp
      REDIS_HOST: redis
      REDIS_PORT: 6739
    ports:
      - "8082:8082"
    depends_on:
      - postgres-db
      - kafka
      - redis
      - typesense

  postgres-db:
    image: postgres:17.5-alpine3.21
    container_name: postgres-db
    restart: always
    env_file: .env
    ports:
      - $POSTGRES_LOCAL_PORT:$POSTGRES_DOCKER_PORT
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./schema/:/docker-entrypoint-initdb.d/

  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: always
    ports:
      - "5540:5540"
    volumes:
      - redis-insight:/data

  redis:
    image: redis:8.0.0-alpine
    ports:
      - $REDIS_LOCAL_PORT:$REDIS_DOCKER_PORT
    volumes:
      - redis-data:/data



  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - $KAFKA_LOCAL_PORT:$KAFKA_DOCKER_PORT
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_NAME: PLAINTEXT

  typesense:
    image: typesense/typesense:28.0
    container_name: typesense
    restart: on-failure
    ports:
      - "8105:8108"
    environment:
      - TYPESENSE_API_KEY=$TYPESENSE_API_KEY
      - TYPESENSE_DATA_DIR=/data
      - TYPESENSE_ENABLE_CORS=true
    volumes:
      - typesense-data:/data
    command: '--data-dir /data --api-key=$TYPESENSE_API_KEY --enable-cors'


volumes:
  postgres-data:
  redis-data:
  typesense-data:
  redis-insight:

