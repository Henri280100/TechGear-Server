/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.v01.techgear_server.generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserAddressSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8253136032698493887L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserAddressSchema\",\"namespace\":\"com.v01.techgear_server.generated\",\"fields\":[{\"name\":\"addressId\",\"type\":\"long\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"addressDetails\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserAddressSchema> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserAddressSchema> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserAddressSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserAddressSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserAddressSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserAddressSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserAddressSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserAddressSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserAddressSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long addressId;
  private java.lang.String country;
  private java.lang.Double latitude;
  private java.lang.Double longitude;
  private java.lang.String addressDetails;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserAddressSchema() {}

  /**
   * All-args constructor.
   * @param addressId The new value for addressId
   * @param country The new value for country
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param addressDetails The new value for addressDetails
   */
  public UserAddressSchema(java.lang.Long addressId, java.lang.String country, java.lang.Double latitude, java.lang.Double longitude, java.lang.String addressDetails) {
    this.addressId = addressId;
    this.country = country;
    this.latitude = latitude;
    this.longitude = longitude;
    this.addressDetails = addressDetails;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return addressId;
    case 1: return country;
    case 2: return latitude;
    case 3: return longitude;
    case 4: return addressDetails;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: addressId = (java.lang.Long)value$; break;
    case 1: country = value$ != null ? value$.toString() : null; break;
    case 2: latitude = (java.lang.Double)value$; break;
    case 3: longitude = (java.lang.Double)value$; break;
    case 4: addressDetails = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'addressId' field.
   * @return The value of the 'addressId' field.
   */
  public long getAddressId() {
    return addressId;
  }


  /**
   * Sets the value of the 'addressId' field.
   * @param value the value to set.
   */
  public void setAddressId(long value) {
    this.addressId = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'addressDetails' field.
   * @return The value of the 'addressDetails' field.
   */
  public java.lang.String getAddressDetails() {
    return addressDetails;
  }


  /**
   * Sets the value of the 'addressDetails' field.
   * @param value the value to set.
   */
  public void setAddressDetails(java.lang.String value) {
    this.addressDetails = value;
  }

  /**
   * Creates a new UserAddressSchema RecordBuilder.
   * @return A new UserAddressSchema RecordBuilder
   */
  public static com.v01.techgear_server.generated.UserAddressSchema.Builder newBuilder() {
    return new com.v01.techgear_server.generated.UserAddressSchema.Builder();
  }

  /**
   * Creates a new UserAddressSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserAddressSchema RecordBuilder
   */
  public static com.v01.techgear_server.generated.UserAddressSchema.Builder newBuilder(com.v01.techgear_server.generated.UserAddressSchema.Builder other) {
    if (other == null) {
      return new com.v01.techgear_server.generated.UserAddressSchema.Builder();
    } else {
      return new com.v01.techgear_server.generated.UserAddressSchema.Builder(other);
    }
  }

  /**
   * Creates a new UserAddressSchema RecordBuilder by copying an existing UserAddressSchema instance.
   * @param other The existing instance to copy.
   * @return A new UserAddressSchema RecordBuilder
   */
  public static com.v01.techgear_server.generated.UserAddressSchema.Builder newBuilder(com.v01.techgear_server.generated.UserAddressSchema other) {
    if (other == null) {
      return new com.v01.techgear_server.generated.UserAddressSchema.Builder();
    } else {
      return new com.v01.techgear_server.generated.UserAddressSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserAddressSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserAddressSchema>
    implements org.apache.avro.data.RecordBuilder<UserAddressSchema> {

    private long addressId;
    private java.lang.String country;
    private java.lang.Double latitude;
    private java.lang.Double longitude;
    private java.lang.String addressDetails;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.v01.techgear_server.generated.UserAddressSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.addressId)) {
        this.addressId = data().deepCopy(fields()[0].schema(), other.addressId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.addressDetails)) {
        this.addressDetails = data().deepCopy(fields()[4].schema(), other.addressDetails);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing UserAddressSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.v01.techgear_server.generated.UserAddressSchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.addressId)) {
        this.addressId = data().deepCopy(fields()[0].schema(), other.addressId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.addressDetails)) {
        this.addressDetails = data().deepCopy(fields()[4].schema(), other.addressDetails);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'addressId' field.
      * @return The value.
      */
    public long getAddressId() {
      return addressId;
    }


    /**
      * Sets the value of the 'addressId' field.
      * @param value The value of 'addressId'.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder setAddressId(long value) {
      validate(fields()[0], value);
      this.addressId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'addressId' field has been set.
      * @return True if the 'addressId' field has been set, false otherwise.
      */
    public boolean hasAddressId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'addressId' field.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder clearAddressId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder setCountry(java.lang.String value) {
      validate(fields()[1], value);
      this.country = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder clearCountry() {
      country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder setLatitude(java.lang.Double value) {
      validate(fields()[2], value);
      this.latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder setLongitude(java.lang.Double value) {
      validate(fields()[3], value);
      this.longitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressDetails' field.
      * @return The value.
      */
    public java.lang.String getAddressDetails() {
      return addressDetails;
    }


    /**
      * Sets the value of the 'addressDetails' field.
      * @param value The value of 'addressDetails'.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder setAddressDetails(java.lang.String value) {
      validate(fields()[4], value);
      this.addressDetails = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'addressDetails' field has been set.
      * @return True if the 'addressDetails' field has been set, false otherwise.
      */
    public boolean hasAddressDetails() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'addressDetails' field.
      * @return This builder.
      */
    public com.v01.techgear_server.generated.UserAddressSchema.Builder clearAddressDetails() {
      addressDetails = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserAddressSchema build() {
      try {
        UserAddressSchema record = new UserAddressSchema();
        record.addressId = fieldSetFlags()[0] ? this.addressId : (java.lang.Long) defaultValue(fields()[0]);
        record.country = fieldSetFlags()[1] ? this.country : (java.lang.String) defaultValue(fields()[1]);
        record.latitude = fieldSetFlags()[2] ? this.latitude : (java.lang.Double) defaultValue(fields()[2]);
        record.longitude = fieldSetFlags()[3] ? this.longitude : (java.lang.Double) defaultValue(fields()[3]);
        record.addressDetails = fieldSetFlags()[4] ? this.addressDetails : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserAddressSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserAddressSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserAddressSchema>
    READER$ = (org.apache.avro.io.DatumReader<UserAddressSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.addressId);

    out.writeString(this.country);

    if (this.latitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.latitude);
    }

    if (this.longitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.longitude);
    }

    if (this.addressDetails == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.addressDetails);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.addressId = in.readLong();

      this.country = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.latitude = null;
      } else {
        this.latitude = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.longitude = null;
      } else {
        this.longitude = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.addressDetails = null;
      } else {
        this.addressDetails = in.readString();
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.addressId = in.readLong();
          break;

        case 1:
          this.country = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.latitude = null;
          } else {
            this.latitude = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.longitude = null;
          } else {
            this.longitude = in.readDouble();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addressDetails = null;
          } else {
            this.addressDetails = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










