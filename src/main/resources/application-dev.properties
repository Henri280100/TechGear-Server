server.port=8082
spring.application.name=techgear_server
spring.datasource.url=jdbc:postgresql://postgres-db:5433/techgeardb
spring.datasource.username=postgres
spring.datasource.password=khoakhoa@123
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.format_sql=true

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.max-lifetime=1800000

# Hibernate ddl auto (create, create-drop, validate, update)

spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=demo
spring.data.mongodb.uri=mongodb://KhoaPham:${MONGODB_PASSWORD:}@localhost:27017/TechGearDB

spring.graphql.path=/graphql
spring.graphql.graphiql.enabled=true
spring.graphql.graphiql.path=/graphiql

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.file-size-threshold=1MB

spring.web.resources.add-mappings=false

access-token.private=${PRIVATE_ACCESS_TOKEN:}
access-token.public=${PUBLIC_ACCESS_TOKEN:}
refresh-token.private=${PRIVATE_REFRESH_TOKEN:}
refresh-token.public=${PUBLIC_REFRESH_TOKEN:}

jwt.secret=${JWT_SECRET:}
jwt.expiration=86400

spring.mail.port=${MAIL_PORT:}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.host=${MAIL_HOST:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties[mail.smtp.connectiontimeout]=5000
spring.mail.properties[mail.smtp.timeout]=3000
spring.mail.properties[mail.smtp.writetimeout]=5000

spring.mail.jndi-name=mail/Session


#Redis
spring.data.redis.host=redis
spring.data.redis.port=6379
spring.cache.type=redis
spring.data.redis.timeout=60000


spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8082/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=ProjectTechGearCredentials
spring.security.oauth2.client.registration.google.scope=email,profile

spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID}
spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET}
spring.security.oauth2.client.registration.facebook.client-name=TechGear
spring.security.oauth2.client.registration.facebook.redirect-uri=http://localhost:8082/login/oauth2/code/facebook
spring.security.oauth2.client.registration.facebook.scope=email,public_profile

# Swagger UI path
springdoc.swagger-ui.path=/swagger-ui.html

# API Docs path
springdoc.api-docs.path=/v3/api-docs

# Enable/disable Swagger UI
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true

typesense.apiKey=bppTGdU4ZdgIJNyRWYi3hPC5C8xQ9IWLHWBYfkWjuCIbtjCp
typesense.host=localhost
typesense.port=8108
typesense.protocol=http
typesense.connection-timeout-seconds=30


spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=techgear-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.admin.auto-create=true
